{"remainingRequest":"/Applications/lg_web/mpa/node_modules/babel-loader/lib/index.js!/Applications/lg_web/mpa/src/assets/js/common/randomColor.js","dependencies":[{"path":"/Applications/lg_web/mpa/src/assets/js/common/randomColor.js","mtime":1563360774435},{"path":"/Applications/lg_web/mpa/node_modules/cache-loader/dist/cjs.js","mtime":1561083984975},{"path":"/Applications/lg_web/mpa/node_modules/babel-loader/lib/index.js","mtime":1561083931133}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nexport default {\n  /**\r\n   * HSL颜色值转换为RGB\r\n   * H，S，L 设定在 [0, 1] 之间\r\n   * R，G，B 返回在 [0, 255] 之间\r\n   * H 色相, S 饱和度, L 亮度\r\n   * 返回RGB色值\r\n   */\n  hslToRgb: function hslToRgb(H, S, L) {\n    var R, G, B;\n\n    if (+S === 0) {\n      R = G = B = L; // 饱和度为0 为灰色\n    } else {\n      var hue2Rgb = function hue2Rgb(p, q, t) {\n        if (t < 0) t += 1;\n        if (t > 1) t -= 1;\n        if (t < 1 / 6) return p + (q - p) * 6 * t;\n        if (t < 1 / 2) return q;\n        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n        return p;\n      };\n\n      var Q = L < 0.5 ? L * (1 + S) : L + S - L * S;\n      var P = 2 * L - Q; // H = H/360;\n\n      R = hue2Rgb(P, Q, H + 1 / 3);\n      G = hue2Rgb(P, Q, H);\n      B = hue2Rgb(P, Q, H - 1 / 3);\n    }\n\n    return [Math.round(R * 255), Math.round(G * 255), Math.round(B * 255)];\n  },\n  // 获取HSL数组\n  getHslArray: function getHslArray() {\n    // 获取随机HSL\n    var H = Math.random();\n    var S = Math.random();\n    var L = Math.random();\n    var ret = [H, S, L];\n    ret[1] = 0.7 + ret[1] * 0.2; // [0.7 - 0.9] 排除过灰颜色\n\n    ret[2] = 0.4 + ret[2] * 0.4; // [0.4 - 0.8] 排除过亮过暗色\n    // 数据转化到小数点后两位\n\n    ret = ret.map(function (item) {\n      return parseFloat(item.toFixed(2));\n    });\n    var hslItem = this.hslToRgb(ret[0], ret[1], ret[2]);\n    return \"rgb(\" + hslItem.toString() + \")\";\n  }\n};",{"version":3,"sources":["/Applications/lg_web/mpa/src/assets/js/common/randomColor.js"],"names":["hslToRgb","H","S","L","R","G","B","hue2Rgb","p","q","t","Q","P","Math","round","getHslArray","random","ret","map","item","parseFloat","toFixed","hslItem","toString"],"mappings":";AAAA,eAAe;AACX;;;;;;;AAOAA,EAAAA,QARW,oBAQFC,CARE,EAQCC,CARD,EAQIC,CARJ,EAQO;AACd,QAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV;;AACA,QAAI,CAACJ,CAAD,KAAO,CAAX,EAAc;AACVE,MAAAA,CAAC,GAAGC,CAAC,GAAGC,CAAC,GAAGH,CAAZ,CADU,CACK;AAClB,KAFD,MAEO;AACH,UAAII,OAAO,GAAG,SAAVA,OAAU,CAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkB;AAC5B,YAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,IAAI,CAAL;AACX,YAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,IAAI,CAAL;AACX,YAAIA,CAAC,GAAG,IAAI,CAAZ,EAAe,OAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,IAAU,CAAV,GAAcE,CAAzB;AACf,YAAIA,CAAC,GAAG,IAAI,CAAZ,EAAe,OAAOD,CAAP;AACf,YAAIC,CAAC,GAAG,IAAI,CAAZ,EAAe,OAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,KAAW,IAAI,CAAJ,GAAQE,CAAnB,IAAwB,CAAnC;AACf,eAAOF,CAAP;AACH,OAPD;;AAQA,UAAIG,CAAC,GAAGR,CAAC,GAAG,GAAJ,GAAUA,CAAC,IAAI,IAAID,CAAR,CAAX,GAAwBC,CAAC,GAAGD,CAAJ,GAAQC,CAAC,GAAGD,CAA5C;AACA,UAAIU,CAAC,GAAG,IAAIT,CAAJ,GAAQQ,CAAhB,CAVG,CAWH;;AACAP,MAAAA,CAAC,GAAGG,OAAO,CAACK,CAAD,EAAID,CAAJ,EAAOV,CAAC,GAAG,IAAI,CAAf,CAAX;AACAI,MAAAA,CAAC,GAAGE,OAAO,CAACK,CAAD,EAAID,CAAJ,EAAOV,CAAP,CAAX;AACAK,MAAAA,CAAC,GAAGC,OAAO,CAACK,CAAD,EAAID,CAAJ,EAAOV,CAAC,GAAG,IAAI,CAAf,CAAX;AACH;;AACD,WAAO,CAACY,IAAI,CAACC,KAAL,CAAWV,CAAC,GAAG,GAAf,CAAD,EAAsBS,IAAI,CAACC,KAAL,CAAWT,CAAC,GAAG,GAAf,CAAtB,EAA2CQ,IAAI,CAACC,KAAL,CAAWR,CAAC,GAAG,GAAf,CAA3C,CAAP;AACH,GA7BU;AA8BX;AACAS,EAAAA,WA/BW,yBA+BG;AACV;AACA,QAAId,CAAC,GAAGY,IAAI,CAACG,MAAL,EAAR;AACA,QAAId,CAAC,GAAGW,IAAI,CAACG,MAAL,EAAR;AACA,QAAIb,CAAC,GAAGU,IAAI,CAACG,MAAL,EAAR;AACA,QAAIC,GAAG,GAAG,CAAChB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAV;AAEAc,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAMA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAxB,CAPU,CAOmB;;AAC7BA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAMA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAxB,CARU,CAQmB;AAC7B;;AACAA,IAAAA,GAAG,GAAGA,GAAG,CAACC,GAAJ,CAAQ,UAASC,IAAT,EAAe;AACzB,aAAOC,UAAU,CAACD,IAAI,CAACE,OAAL,CAAa,CAAb,CAAD,CAAjB;AACH,KAFK,CAAN;AAGA,QAAIC,OAAO,GAAG,KAAKtB,QAAL,CAAciB,GAAG,CAAC,CAAD,CAAjB,EAAqBA,GAAG,CAAC,CAAD,CAAxB,EAA4BA,GAAG,CAAC,CAAD,CAA/B,CAAd;AACA,WAAO,SAASK,OAAO,CAACC,QAAR,EAAT,GAA8B,GAArC;AACH;AA9CU,CAAf","sourcesContent":["export default {\r\n    /**\r\n     * HSL颜色值转换为RGB\r\n     * H，S，L 设定在 [0, 1] 之间\r\n     * R，G，B 返回在 [0, 255] 之间\r\n     * H 色相, S 饱和度, L 亮度\r\n     * 返回RGB色值\r\n     */\r\n    hslToRgb(H, S, L) {\r\n        let R, G, B;\r\n        if (+S === 0) {\r\n            R = G = B = L; // 饱和度为0 为灰色\r\n        } else {\r\n            let hue2Rgb = function(p, q, t) {\r\n                if (t < 0) t += 1;\r\n                if (t > 1) t -= 1;\r\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n                if (t < 1 / 2) return q;\r\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n                return p;\r\n            };\r\n            let Q = L < 0.5 ? L * (1 + S) : L + S - L * S;\r\n            let P = 2 * L - Q;\r\n            // H = H/360;\r\n            R = hue2Rgb(P, Q, H + 1 / 3);\r\n            G = hue2Rgb(P, Q, H);\r\n            B = hue2Rgb(P, Q, H - 1 / 3);\r\n        }\r\n        return [Math.round(R * 255), Math.round(G * 255), Math.round(B * 255)];\r\n    },\r\n    // 获取HSL数组\r\n    getHslArray() {\r\n        // 获取随机HSL\r\n        let H = Math.random();\r\n        let S = Math.random();\r\n        let L = Math.random();\r\n        let ret = [H, S, L];\r\n\r\n        ret[1] = 0.7 + ret[1] * 0.2; // [0.7 - 0.9] 排除过灰颜色\r\n        ret[2] = 0.4 + ret[2] * 0.4; // [0.4 - 0.8] 排除过亮过暗色\r\n        // 数据转化到小数点后两位\r\n        ret = ret.map(function(item) {\r\n            return parseFloat(item.toFixed(2));\r\n        });\r\n        let hslItem = this.hslToRgb(ret[0],ret[1],ret[2]);\r\n        return \"rgb(\" + hslItem.toString() + \")\";\r\n    },\r\n}\r\n"]}]}