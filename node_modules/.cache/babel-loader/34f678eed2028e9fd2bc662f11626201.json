{"remainingRequest":"/Applications/lg_web/yupuhu/node_modules/thread-loader/dist/cjs.js!/Applications/lg_web/yupuhu/node_modules/babel-loader/lib/index.js!/Applications/lg_web/yupuhu/src/assets/js/common/regular.js","dependencies":[{"path":"/Applications/lg_web/yupuhu/src/assets/js/common/regular.js","mtime":1562826931289},{"path":"/Applications/lg_web/yupuhu/node_modules/cache-loader/dist/cjs.js","mtime":1561083984975},{"path":"/Applications/lg_web/yupuhu/node_modules/thread-loader/dist/cjs.js","mtime":1561083989993},{"path":"/Applications/lg_web/yupuhu/node_modules/babel-loader/lib/index.js","mtime":1561083931133}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nexport default {\n  /**\n   * 电话号码/手机号正则验证\n   */\n  number: function number() {\n    return /^1[3|4|5|6|7|8][0-9]\\d{8}$/;\n  },\n\n  /**\n   * 身份证号码正则验证\n   */\n  idCard: function idCard() {\n    return /(^\\\\d{15}$)|(^\\\\d{18}$)|(^\\\\d{17}(\\\\d|X|x)$)/;\n  },\n\n  /**\n   * 匹配以字母开头字母开头，英文和数字混合的6-20位(密码/用户名)数字正则验证\n   */\n  passwordReg: function passwordReg() {\n    return /^[a-zA-Z]([a-zA-Z0-9]{5,20})$/;\n  },\n\n  /**\n   * 只能输入数字正则\n   */\n  num: function num() {\n    return /^[+-]?(0|([1-9]\\d*))(\\.\\d+)?$/;\n  },\n  numComma: function numComma() {\n    return /^[\\d,]*$/;\n  },\n\n  /**\n   * element-ui自定义验证函数\n   *\n   */\n\n  /**\n   * 输入的电话号码验证\n   * @param rule\n   * @param value\n   * @param callback\n   */\n  validateNumber: function validateNumber(rule, value, callback) {\n    if (value === '') {\n      callback(new Error('请输入您的手机号'));\n    } else if (!/^1[3|4|5|6|7|8|9][0-9]\\d{8}$/.test(value)) {\n      callback(new Error('手机号码格式不正确'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 身份证校验\n   * @param rule\n   * @param value\n   * @param callback\n   */\n  validateIDcard: function validateIDcard(rule, value, callback) {\n    var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n\n    if (value === '') {\n      callback(new Error('请输入身份证号码'));\n    } else if (!reg.test(value)) {\n      callback(new Error('请确认您的身份证号码是否正确'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 密码验证\n   * @param rule\n   * @param value\n   * @param callback\n   */\n  validatePass: function validatePass(rule, value, callback) {\n    var reg = /^[a-zA-Z]([a-zA-Z0-9]{5,20})$/;\n\n    if (value === '') {\n      callback(new Error('请输入密码'));\n    } else if (!reg.test(value)) {\n      callback(new Error('请输入字母开头，英文和数字混合的6-20位数字'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 银行卡号码验证\n   * @param rule\n   * @param value\n   * @param callback\n   */\n  validateBank: function validateBank(rule, value, callback) {\n    var reg = /^([1-9]{1})(\\d{14}|\\d{18}|\\d{19})$/;\n\n    if (value === '') {\n      callback(new Error('请输入您的银行卡号'));\n    } else if (!reg.test(value)) {\n      callback(new Error('请输入正确的银行卡位数'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证数字+逗号+点\n   */\n  validateNumComma: function validateNumComma(rule, value, callback) {\n    var reg = /^[\\d,.]*$/;\n\n    if (value === '') {\n      callback();\n    } else if (!reg.test(value)) {\n      callback(new Error('请输入正确的格式！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证是否是数字类型和长度必须为10位\n   */\n  validateNumLength: function validateNumLength(rule, value, callback) {\n    var reg = /^[\\d,.]*$/;\n\n    if (value === '') {\n      callback();\n    } else if (!reg.test(value) && value.length !== 10) {\n      callback(new Error('长度必须为10位且类型必须为数字！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证是否包含大写字母和数字\n   */\n  validateNumUpperase: function validateNumUpperase(rule, value, callback) {\n    var reg1 = /^[A-Z][A-Z0-9_]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (value.length < 2) {\n      callback(new Error('长度不能少于2位！'));\n    } else if (!reg1.test(value)) {\n      callback(new Error('必须以大写字母开头包含大写字母，数字，下划线'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证只能输入大写字母^[A-Z]\n   */\n  validateZiMuUpperase: function validateZiMuUpperase(rule, value, callback) {\n    var reg = /^[A-Z]+$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value)) {\n      callback(new Error('只能输入大写字母！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证只能输入大写字母^[A-Z]\n   */\n  validateNumberLength: function validateNumberLength(rule, value, callback) {\n    var reg = /^[\\d]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1 || value.length > 3 || value === '0') {\n      callback(new Error('长度必须为1-3位且类型且必须为数字且不为零！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证只能输入数字而且14位\n   */\n  validateNumberFourth: function validateNumberFourth(rule, value, callback) {\n    var reg = /^[\\d]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1 || value.length > 14) {\n      callback(new Error('长度必须为1-14位且类型且必须为数字'));\n    } else {\n      callback();\n    }\n  },\n\n  /***\n   * 验证大写英文字母和数字\n   */\n  validateDaZiMuNum: function validateDaZiMuNum(rule, value, callback) {\n    var reg = /^[0-9A-Z]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1) {\n      callback(new Error('纯数字、纯大写字母或者数字加大写字母！'));\n    } else {\n      callback();\n    }\n  },\n\n  /***\n   * 验证只能输入1-3位数字或者,\n   */\n  validateNumberLengthDouhao: function validateNumberLengthDouhao(rule, value, callback) {\n    var reg = /^[\\d,]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1 || value === '0') {\n      callback(new Error('长度必须大于1位且类型且必须为数字且不为零！'));\n    } else if (value.substring(0, 1) === ',' || value.substring(0, 1) === '0' || value.split(',').length - 1 > 3) {\n      callback(new Error('不能以逗号或者0开头或者逗号不能超过两位！'));\n    } else if (value.split(',').length - 1 > 1) {\n      callback(new Error('逗号不能超过两位！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证字母数字下划线\n   */\n  validateZimuXhx: function validateZimuXhx(rule, value, callback) {\n    var reg = /^[0-9A-Z_]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value)) {\n      callback(new Error('输入只能包含字母或者下划线'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证英文字母/数字/下划线\n   */\n  validateZimuNumberXhx: function validateZimuNumberXhx(rule, value, callback) {\n    var reg = /^[0-9a-zA-Z_]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value)) {\n      callback(new Error('输入只能包含字母、数字或者下划线'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证只能输入数字\n   */\n  validateNum: function validateNum(rule, value, callback) {\n    var reg = /^[\\d.]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1 || value.length > 14) {\n      callback(new Error('必须为数字!'));\n    } else {\n      callback();\n    }\n  }\n};",null]}