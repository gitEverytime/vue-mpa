{"remainingRequest":"/Applications/lg_web/yupuhu/node_modules/thread-loader/dist/cjs.js!/Applications/lg_web/yupuhu/node_modules/babel-loader/lib/index.js!/Applications/lg_web/yupuhu/src/assets/js/common/array.js","dependencies":[{"path":"/Applications/lg_web/yupuhu/src/assets/js/common/array.js","mtime":1557743605995},{"path":"/Applications/lg_web/yupuhu/node_modules/cache-loader/dist/cjs.js","mtime":1561083984975},{"path":"/Applications/lg_web/yupuhu/node_modules/thread-loader/dist/cjs.js","mtime":1561083989993},{"path":"/Applications/lg_web/yupuhu/node_modules/babel-loader/lib/index.js","mtime":1561083931133}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Applications/lg_web/yupuhu/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nexport default {\n  //数组去重   newArray：得到新的数组名    oldArray：原来没有去重的数组名   ID   根据原数组的什么主键去拿\n  duplicateRemoval: function duplicateRemoval(newArray, oldArray, key) {\n    newArray = new Set();\n    oldArray.forEach(function (item) {\n      newArray.add(item[key]);\n    });\n    newArray = _toConsumableArray(newArray);\n    return newArray;\n  },\n  duplicateRemovalFirm: function duplicateRemovalFirm(newArray, oldArray, key) {\n    newArray = new Set();\n    oldArray.forEach(function (item) {\n      newArray.add({\n        id: item[key],\n        owner_id: item.firm_info[0].firm_id\n      });\n    });\n    newArray = _toConsumableArray(newArray);\n    return newArray;\n  }\n};",null]}