{"remainingRequest":"/Applications/lg_web/mpa/node_modules/babel-loader/lib/index.js!/Applications/lg_web/mpa/src/assets/js/common/regular.js","dependencies":[{"path":"/Applications/lg_web/mpa/src/assets/js/common/regular.js","mtime":1562826931289},{"path":"/Applications/lg_web/mpa/node_modules/cache-loader/dist/cjs.js","mtime":1561083984975},{"path":"/Applications/lg_web/mpa/node_modules/babel-loader/lib/index.js","mtime":1561083931133}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nexport default {\n  /**\n   * 电话号码/手机号正则验证\n   */\n  number: function number() {\n    return /^1[3|4|5|6|7|8][0-9]\\d{8}$/;\n  },\n\n  /**\n   * 身份证号码正则验证\n   */\n  idCard: function idCard() {\n    return /(^\\\\d{15}$)|(^\\\\d{18}$)|(^\\\\d{17}(\\\\d|X|x)$)/;\n  },\n\n  /**\n   * 匹配以字母开头字母开头，英文和数字混合的6-20位(密码/用户名)数字正则验证\n   */\n  passwordReg: function passwordReg() {\n    return /^[a-zA-Z]([a-zA-Z0-9]{5,20})$/;\n  },\n\n  /**\n   * 只能输入数字正则\n   */\n  num: function num() {\n    return /^[+-]?(0|([1-9]\\d*))(\\.\\d+)?$/;\n  },\n  numComma: function numComma() {\n    return /^[\\d,]*$/;\n  },\n\n  /**\n   * element-ui自定义验证函数\n   *\n   */\n\n  /**\n   * 输入的电话号码验证\n   * @param rule\n   * @param value\n   * @param callback\n   */\n  validateNumber: function validateNumber(rule, value, callback) {\n    if (value === '') {\n      callback(new Error('请输入您的手机号'));\n    } else if (!/^1[3|4|5|6|7|8|9][0-9]\\d{8}$/.test(value)) {\n      callback(new Error('手机号码格式不正确'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 身份证校验\n   * @param rule\n   * @param value\n   * @param callback\n   */\n  validateIDcard: function validateIDcard(rule, value, callback) {\n    var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n\n    if (value === '') {\n      callback(new Error('请输入身份证号码'));\n    } else if (!reg.test(value)) {\n      callback(new Error('请确认您的身份证号码是否正确'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 密码验证\n   * @param rule\n   * @param value\n   * @param callback\n   */\n  validatePass: function validatePass(rule, value, callback) {\n    var reg = /^[a-zA-Z]([a-zA-Z0-9]{5,20})$/;\n\n    if (value === '') {\n      callback(new Error('请输入密码'));\n    } else if (!reg.test(value)) {\n      callback(new Error('请输入字母开头，英文和数字混合的6-20位数字'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 银行卡号码验证\n   * @param rule\n   * @param value\n   * @param callback\n   */\n  validateBank: function validateBank(rule, value, callback) {\n    var reg = /^([1-9]{1})(\\d{14}|\\d{18}|\\d{19})$/;\n\n    if (value === '') {\n      callback(new Error('请输入您的银行卡号'));\n    } else if (!reg.test(value)) {\n      callback(new Error('请输入正确的银行卡位数'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证数字+逗号+点\n   */\n  validateNumComma: function validateNumComma(rule, value, callback) {\n    var reg = /^[\\d,.]*$/;\n\n    if (value === '') {\n      callback();\n    } else if (!reg.test(value)) {\n      callback(new Error('请输入正确的格式！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证是否是数字类型和长度必须为10位\n   */\n  validateNumLength: function validateNumLength(rule, value, callback) {\n    var reg = /^[\\d,.]*$/;\n\n    if (value === '') {\n      callback();\n    } else if (!reg.test(value) && value.length !== 10) {\n      callback(new Error('长度必须为10位且类型必须为数字！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证是否包含大写字母和数字\n   */\n  validateNumUpperase: function validateNumUpperase(rule, value, callback) {\n    var reg1 = /^[A-Z][A-Z0-9_]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (value.length < 2) {\n      callback(new Error('长度不能少于2位！'));\n    } else if (!reg1.test(value)) {\n      callback(new Error('必须以大写字母开头包含大写字母，数字，下划线'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证只能输入大写字母^[A-Z]\n   */\n  validateZiMuUpperase: function validateZiMuUpperase(rule, value, callback) {\n    var reg = /^[A-Z]+$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value)) {\n      callback(new Error('只能输入大写字母！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证只能输入大写字母^[A-Z]\n   */\n  validateNumberLength: function validateNumberLength(rule, value, callback) {\n    var reg = /^[\\d]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1 || value.length > 3 || value === '0') {\n      callback(new Error('长度必须为1-3位且类型且必须为数字且不为零！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证只能输入数字而且14位\n   */\n  validateNumberFourth: function validateNumberFourth(rule, value, callback) {\n    var reg = /^[\\d]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1 || value.length > 14) {\n      callback(new Error('长度必须为1-14位且类型且必须为数字'));\n    } else {\n      callback();\n    }\n  },\n\n  /***\n   * 验证大写英文字母和数字\n   */\n  validateDaZiMuNum: function validateDaZiMuNum(rule, value, callback) {\n    var reg = /^[0-9A-Z]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1) {\n      callback(new Error('纯数字、纯大写字母或者数字加大写字母！'));\n    } else {\n      callback();\n    }\n  },\n\n  /***\n   * 验证只能输入1-3位数字或者,\n   */\n  validateNumberLengthDouhao: function validateNumberLengthDouhao(rule, value, callback) {\n    var reg = /^[\\d,]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1 || value === '0') {\n      callback(new Error('长度必须大于1位且类型且必须为数字且不为零！'));\n    } else if (value.substring(0, 1) === ',' || value.substring(0, 1) === '0' || value.split(',').length - 1 > 3) {\n      callback(new Error('不能以逗号或者0开头或者逗号不能超过两位！'));\n    } else if (value.split(',').length - 1 > 1) {\n      callback(new Error('逗号不能超过两位！'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证字母数字下划线\n   */\n  validateZimuXhx: function validateZimuXhx(rule, value, callback) {\n    var reg = /^[0-9A-Z_]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value)) {\n      callback(new Error('输入只能包含字母或者下划线'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证英文字母/数字/下划线\n   */\n  validateZimuNumberXhx: function validateZimuNumberXhx(rule, value, callback) {\n    var reg = /^[0-9a-zA-Z_]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value)) {\n      callback(new Error('输入只能包含字母、数字或者下划线'));\n    } else {\n      callback();\n    }\n  },\n\n  /**\n   * 验证只能输入数字\n   */\n  validateNum: function validateNum(rule, value, callback) {\n    var reg = /^[\\d.]*$/;\n\n    if (value === '') {\n      callback(new Error('不能为空！'));\n    } else if (!reg.test(value) || value.length < 1 || value.length > 14) {\n      callback(new Error('必须为数字!'));\n    } else {\n      callback();\n    }\n  }\n};",{"version":3,"sources":["/Applications/lg_web/mpa/src/assets/js/common/regular.js"],"names":["number","idCard","passwordReg","num","numComma","validateNumber","rule","value","callback","Error","test","validateIDcard","reg","validatePass","validateBank","validateNumComma","validateNumLength","length","validateNumUpperase","reg1","validateZiMuUpperase","validateNumberLength","validateNumberFourth","validateDaZiMuNum","validateNumberLengthDouhao","substring","split","validateZimuXhx","validateZimuNumberXhx","validateNum"],"mappings":"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","sourcesContent":["export default {\n    /**\n     * 电话号码/手机号正则验证\n     */\n    number(){\n        return /^1[3|4|5|6|7|8][0-9]\\d{8}$/\n    },\n    /**\n     * 身份证号码正则验证\n     */\n    idCard(){\n        return /(^\\\\d{15}$)|(^\\\\d{18}$)|(^\\\\d{17}(\\\\d|X|x)$)/\n    },\n    /**\n     * 匹配以字母开头字母开头，英文和数字混合的6-20位(密码/用户名)数字正则验证\n     */\n    passwordReg(){\n        return /^[a-zA-Z]([a-zA-Z0-9]{5,20})$/\n    },\n\n    /**\n     * 只能输入数字正则\n     */\n    num(){\n        return /^[+-]?(0|([1-9]\\d*))(\\.\\d+)?$/\n    },\n\n    numComma(){\n        return /^[\\d,]*$/\n    },\n\n    /**\n     * element-ui自定义验证函数\n     *\n     */\n\n    /**\n     * 输入的电话号码验证\n     * @param rule\n     * @param value\n     * @param callback\n     */\n    validateNumber(rule, value, callback){\n        if (value === '') {\n            callback(new Error('请输入您的手机号'));\n        } else if (!/^1[3|4|5|6|7|8|9][0-9]\\d{8}$/.test(value)) {\n            callback(new Error('手机号码格式不正确'));\n        } else {\n            callback();\n        }\n    },\n\n    /**\n     * 身份证校验\n     * @param rule\n     * @param value\n     * @param callback\n     */\n    validateIDcard(rule, value, callback) {\n        let reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n        if (value === '') {\n            callback(new Error('请输入身份证号码'));\n        }else if(!reg.test(value)){\n            callback(new Error('请确认您的身份证号码是否正确'));\n        } else {\n            callback();\n        }\n    },\n\n    /**\n     * 密码验证\n     * @param rule\n     * @param value\n     * @param callback\n     */\n    validatePass(rule, value, callback) {\n        let reg = /^[a-zA-Z]([a-zA-Z0-9]{5,20})$/;\n        if (value === '') {\n            callback(new Error('请输入密码'));\n        }else if(!reg.test(value)){\n            callback(new Error('请输入字母开头，英文和数字混合的6-20位数字'));\n        } else {\n            callback();\n        }\n    },\n\n    /**\n     * 银行卡号码验证\n     * @param rule\n     * @param value\n     * @param callback\n     */\n    validateBank(rule, value, callback) {\n        let reg = /^([1-9]{1})(\\d{14}|\\d{18}|\\d{19})$/;\n        if (value === '') {\n            callback(new Error('请输入您的银行卡号'));\n        }else if(!reg.test(value)){\n            callback(new Error('请输入正确的银行卡位数'));\n        } else {\n            callback();\n        }\n    },\n\n    /**\n     * 验证数字+逗号+点\n     */\n    validateNumComma(rule, value, callback){\n        let reg = /^[\\d,.]*$/;\n        if (value === '') {\n            callback();\n        }else if(!reg.test(value)){\n            callback(new Error('请输入正确的格式！'));\n        } else {\n            callback();\n        }\n    },\n\n    /**\n     * 验证是否是数字类型和长度必须为10位\n     */\n    validateNumLength(rule, value, callback){\n        let reg = /^[\\d,.]*$/;\n        if (value === '') {\n            callback();\n        }else if(!reg.test(value) && value.length !== 10){\n            callback(new Error('长度必须为10位且类型必须为数字！'));\n        } else {\n            callback();\n        }\n    },\n    /**\n     * 验证是否包含大写字母和数字\n     */\n    validateNumUpperase(rule, value, callback){\n        let reg1 = /^[A-Z][A-Z0-9_]*$/;\n        if (value === '') {\n            callback(new Error('不能为空！'));\n        }else if(value.length < 2){\n            callback(new Error('长度不能少于2位！'));\n        }else if(!reg1.test(value)){\n            callback(new Error('必须以大写字母开头包含大写字母，数字，下划线'));\n        }else {\n            callback();\n        }\n    },\n    /**\n     * 验证只能输入大写字母^[A-Z]\n     */\n    validateZiMuUpperase(rule, value, callback){\n        let reg = /^[A-Z]+$/;\n        if (value === '') {\n            callback(new Error('不能为空！'));\n        }else if(!reg.test(value)){\n            callback(new Error('只能输入大写字母！'));\n        }else {\n            callback();\n        }\n    },\n    /**\n     * 验证只能输入大写字母^[A-Z]\n     */\n    validateNumberLength(rule, value, callback){\n        let reg = /^[\\d]*$/;\n        if (value === '') {\n            callback(new Error('不能为空！'));\n        }else if(!reg.test(value) || value.length <1  || value.length >3 || value === '0' ){\n            callback(new Error('长度必须为1-3位且类型且必须为数字且不为零！'));\n        } else {\n            callback();\n        }\n    },\n    /**\n     * 验证只能输入数字而且14位\n     */\n    validateNumberFourth(rule, value, callback){\n        let reg = /^[\\d]*$/;\n        if (value === '') {\n            callback(new Error('不能为空！'));\n        }else if(!reg.test(value) || value.length <1  || value.length >14 ){\n            callback(new Error('长度必须为1-14位且类型且必须为数字'));\n        } else {\n            callback();\n        }\n    },\n    /***\n     * 验证大写英文字母和数字\n     */\n    validateDaZiMuNum(rule, value, callback){\n        let reg = /^[0-9A-Z]*$/;\n        if (value === '') {\n            callback(new Error('不能为空！'));\n        }else if(!reg.test(value) || value.length <1 ){\n            callback(new Error('纯数字、纯大写字母或者数字加大写字母！'));\n        } else {\n            callback();\n        }\n    },\n    /***\n     * 验证只能输入1-3位数字或者,\n     */\n    validateNumberLengthDouhao(rule, value, callback){\n        let reg = /^[\\d,]*$/;\n        if (value === '') {\n            callback(new Error('不能为空！'));\n        } else if(!reg.test(value) || value.length <1 || value === '0' ){\n            callback(new Error('长度必须大于1位且类型且必须为数字且不为零！'));\n        } else if(value.substring(0,1) === ',' || value.substring(0,1) === '0' || value.split(',').length-1 >3){\n            callback(new Error('不能以逗号或者0开头或者逗号不能超过两位！'));\n        } else if(value.split(',').length-1 >1){\n            callback(new Error('逗号不能超过两位！'));\n        }else {\n            callback();\n        }\n    },\n    /**\n     * 验证字母数字下划线\n     */\n    validateZimuXhx(rule, value, callback){\n        let reg = /^[0-9A-Z_]*$/;\n        if (value === '') {\n            callback(new Error('不能为空！'));\n        }else if(!reg.test(value)){\n            callback(new Error('输入只能包含字母或者下划线'));\n        } else {\n            callback();\n        }\n    },\n    /**\n     * 验证英文字母/数字/下划线\n     */\n    validateZimuNumberXhx(rule, value, callback){\n        let reg = /^[0-9a-zA-Z_]*$/;\n        if (value === '') {\n            callback(new Error('不能为空！'));\n        }else if(!reg.test(value)){\n            callback(new Error('输入只能包含字母、数字或者下划线'));\n        } else {\n            callback();\n        }\n    },\n    /**\n     * 验证只能输入数字\n     */\n    validateNum(rule, value, callback){\n        let reg = /^[\\d.]*$/;\n        if (value === '') {\n            callback(new Error('不能为空！'));\n        }else if(!reg.test(value) || value.length <1  || value.length >14 ){\n            callback(new Error('必须为数字!'));\n        } else {\n            callback();\n        }\n    },\n\n}"]}]}