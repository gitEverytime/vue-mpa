{"remainingRequest":"/Applications/lg_web/mpa/node_modules/babel-loader/lib/index.js!/Applications/lg_web/mpa/src/entries/mobile/axios.js","dependencies":[{"path":"/Applications/lg_web/mpa/src/entries/mobile/axios.js","mtime":1563847744239},{"path":"/Applications/lg_web/mpa/node_modules/cache-loader/dist/cjs.js","mtime":1561083984975},{"path":"/Applications/lg_web/mpa/node_modules/babel-loader/lib/index.js","mtime":1561083931133}],"contextDependencies":[],"result":["'use strict';\n\nimport axios from 'axios';\nimport qs from 'qs'; //qs组件来避开ajax信使请求，并兼容Android。\n\nimport Vue from 'vue';\nimport cookie from \"../../assets/js/common/cookie.js\";\nimport { AlertPlugin } from 'vux';\nVue.use(AlertPlugin);\nvar vm = new Vue({// router\n}); // console.log(router)\n\n/**\n * http请求拦截器\n */\n\naxios.interceptors.request.use(function (config) {\n  if (vm.cookie.get(\"xianyu_token\")) {\n    // 判断是否存在token，如果存在的话，则每个http请求的header都加上token,username\n    config.headers.Authorization = \"Token \".concat(vm.cookie.get(\"xianyu_token\"));\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  vm.$vux.alert.show({\n    title: '网络错误',\n    content: error,\n    onHide: function onHide() {\n      location.reload();\n    }\n  });\n});\n\nfunction checkStatus(response) {\n  if (response && response.status === 200) {\n    return response; //拿到接口请求成功并且登录成功后的请求结果\n    // 如果不需要除了data之外的数据，可以直接 return response.data\n  } else {\n      return response; //网络错误，服务器错误，未登录成功\n    }\n}\n\nfunction checkCode(res) {\n  /**\n   * 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n   */\n  if (!res) {\n    vm.$vux.alert.show({\n      title: '网络错误',\n      content: '亲，您的网络出了一点小状况喔,请点击确定重新加载页面！',\n      onHide: function onHide() {\n        location.reload();\n      }\n    });\n  } else if (res.data.code === 404.666) {\n    //先判断是否处于登录状态\n    cookie.delCookie('xianyu_token');\n    cookie.delCookie('is_super');\n    cookie.delCookie('nickname');\n    cookie.delCookie('username');\n    cookie.delCookie('sex');\n    cookie.delCookie('phone');\n    cookie.delCookie('email');\n    cookie.delCookie('organization_name');\n    cookie.delCookie('post_name');\n    cookie.delCookie('user_id');\n    cookie.delCookie('img_url');\n    document.querySelectorAll('.vux-loading').style.display = 'none';\n    window.location.href = \"/mobile.html#/login\";\n  } else {\n    return res;\n  }\n}\n\nexport default {\n  post: function post(url, data) {\n    return axios({\n      method: 'post',\n      baseURL: '/',\n      url: url,\n      data: qs.stringify(data),\n      timeout: 100000,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      }\n    }).then(function (response) {\n      return checkStatus(response);\n    }).then(function (response) {\n      return checkCode(response);\n    });\n  },\n  get: function get(url, params) {\n    return axios({\n      method: 'get',\n      baseURL: '/',\n      url: url,\n      params: params,\n      // get 请求时带的参数\n      timeout: 100000,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      }\n    }).then(function (response) {\n      return checkStatus(response);\n    }).then(function (response) {\n      return checkCode(response);\n    });\n  }\n};",{"version":3,"sources":["/Applications/lg_web/mpa/src/entries/mobile/axios.js"],"names":["axios","qs","Vue","cookie","AlertPlugin","use","vm","interceptors","request","config","get","headers","Authorization","error","Promise","reject","response","$vux","alert","show","title","content","onHide","location","reload","checkStatus","status","checkCode","res","data","code","delCookie","document","querySelectorAll","style","display","window","href","post","url","method","baseURL","stringify","timeout","then","params"],"mappings":"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","sourcesContent":["'use strict';\n\nimport axios from 'axios'\nimport qs from 'qs'   //qs组件来避开ajax信使请求，并兼容Android。\nimport Vue from 'vue'\nimport cookie   from '../../assets/js/common/cookie.js'\nimport  { AlertPlugin } from 'vux'\nVue.use(AlertPlugin);\nlet vm = new Vue({\n    // router\n});\n// console.log(router)\n/**\n * http请求拦截器\n */\naxios.interceptors.request.use(config => {\n    if (vm.cookie.get(\"xianyu_token\")) {  // 判断是否存在token，如果存在的话，则每个http请求的header都加上token,username\n        config.headers.Authorization = `Token ${vm.cookie.get(\"xianyu_token\")}`;\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\naxios.interceptors.response.use(response => {\n    return response\n}, error => {\n        vm.$vux.alert.show({\n            title: '网络错误',\n            content: error,\n            onHide () {\n                location.reload();\n            }\n        });\n});\n\nfunction checkStatus (response) {\n    if (response && (response.status === 200)) {\n        return response   //拿到接口请求成功并且登录成功后的请求结果\n        // 如果不需要除了data之外的数据，可以直接 return response.data\n    }else{\n        return response   //网络错误，服务器错误，未登录成功\n    }\n}\n\nfunction checkCode (res) {\n    /**\n     * 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n     */\n    if(!res){\n        vm.$vux.alert.show({\n            title: '网络错误',\n            content: '亲，您的网络出了一点小状况喔,请点击确定重新加载页面！',\n            onHide () {\n                location.reload();\n            }\n        });\n    }else if(res.data.code === 404.666){               //先判断是否处于登录状态\n        cookie.delCookie('xianyu_token');\n        cookie.delCookie('is_super');\n        cookie.delCookie('nickname');\n        cookie.delCookie('username');\n        cookie.delCookie('sex');\n        cookie.delCookie('phone');\n        cookie.delCookie('email');\n        cookie.delCookie('organization_name');\n        cookie.delCookie('post_name');\n        cookie.delCookie('user_id');\n        cookie.delCookie('img_url');\n        document.querySelectorAll('.vux-loading').style.display='none';\n        window.location.href=\"/mobile.html#/login\";\n    }else{\n        return res\n    }\n}\n\nexport default {\n    post (url, data) {\n        return axios({\n            method: 'post',\n            baseURL: '/',\n            url,\n            data: qs.stringify(data),\n            timeout: 100000,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (response) => {\n                return checkCode(response)\n            }\n        )\n    },\n    get (url, params) {\n        return axios({\n            method: 'get',\n            baseURL: '/',\n            url,\n            params, // get 请求时带的参数\n            timeout: 100000,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (response) => {\n                return checkCode(response)\n            }\n        )\n    },\n\n}\n"]}]}